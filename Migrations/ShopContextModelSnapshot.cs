// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_commmerce.Entities;

#nullable disable

namespace e_commmerce.Migrations
{
    [DbContext(typeof(ShopContext))]
    partial class ShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("e_commmerce.Entities.Account", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsAdmin")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pass");

                    b.HasKey("Uid")
                        .HasName("PK__Accounts__C5B69A4AFC105B6D");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("e_commmerce.Entities.BillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountUid")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("County")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Streetaddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AccountUid");

                    b.ToTable("BillingAddress", (string)null);
                });

            modelBuilder.Entity("e_commmerce.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountUid")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountUid");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("e_commmerce.Entities.Category", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cid"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Cid")
                        .HasName("PK__Categori__C1FFD861C159A1EA");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("e_commmerce.Entities.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckoutDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("totalAmount");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Checkout", (string)null);
                });

            modelBuilder.Entity("e_commmerce.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("e_commmerce.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CateId")
                        .HasColumnType("int")
                        .HasColumnName("cateID");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Products__3214EC07A2793DA3");

                    b.HasIndex("CateId");

                    b.HasIndex("ColorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("e_commmerce.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountUid")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountUid");

                    b.HasIndex("ProductId");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("e_commmerce.Entities.BillingAddress", b =>
                {
                    b.HasOne("e_commmerce.Entities.Account", "AccountU")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("AccountUid")
                        .HasConstraintName("FK_BillingAddress_Accounts");

                    b.Navigation("AccountU");
                });

            modelBuilder.Entity("e_commmerce.Entities.Cart", b =>
                {
                    b.HasOne("e_commmerce.Entities.Account", "AccountU")
                        .WithMany("Carts")
                        .HasForeignKey("AccountUid")
                        .HasConstraintName("FK_Cart_Accounts");

                    b.HasOne("e_commmerce.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Cart_Products");

                    b.Navigation("AccountU");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("e_commmerce.Entities.Checkout", b =>
                {
                    b.HasOne("e_commmerce.Entities.Cart", "Cart")
                        .WithMany("Checkouts")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_Checkout_Cart");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("e_commmerce.Entities.Product", b =>
                {
                    b.HasOne("e_commmerce.Entities.Category", "Cate")
                        .WithMany("Products")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__Products__cateID__3B75D760");

                    b.HasOne("e_commmerce.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Products_Color");

                    b.Navigation("Cate");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("e_commmerce.Entities.Wishlist", b =>
                {
                    b.HasOne("e_commmerce.Entities.Account", "AccountU")
                        .WithMany("Wishlists")
                        .HasForeignKey("AccountUid")
                        .HasConstraintName("FK_Wishlist_Accounts");

                    b.HasOne("e_commmerce.Entities.Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Wishlist_Products");

                    b.Navigation("AccountU");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("e_commmerce.Entities.Account", b =>
                {
                    b.Navigation("BillingAddresses");

                    b.Navigation("Carts");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("e_commmerce.Entities.Cart", b =>
                {
                    b.Navigation("Checkouts");
                });

            modelBuilder.Entity("e_commmerce.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("e_commmerce.Entities.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("e_commmerce.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
